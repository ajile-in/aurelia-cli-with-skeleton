{"version":3,"sources":["app.js","environment.js","main.js","users.js","welcome.js","resources/index.js","/Users/ajayjadhav/projects/aurelia-cli-with-skeleton/src/app.html","/Users/ajayjadhav/projects/aurelia-cli-with-skeleton/src/nav-bar.html","/Users/ajayjadhav/projects/aurelia-cli-with-skeleton/src/users.html","/Users/ajayjadhav/projects/aurelia-cli-with-skeleton/src/welcome.html"],"names":["App","http","message","users","activate","fetch","getHttpClient","configure","config","useStandardConfiguration","withBaseUrl","response","json","console","log","debug","testing","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","self","System","import","resolve","Users","of","heading","Welcome","firstName","lastName","previousValue","fullName","submit","alert","canDeactivate","confirm","UpperValueConverter","toView","value","toUpperCase"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject } from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-fetch-client';\n\n@inject(HttpClient)\nexport class App {\n    constructor(http) {\n        this.message = 'Hello World! - Users';\n\n        this.http = http;\n\n        this.users = [];\n    }\n\n    async activate() {\n        // ensure fetch is polyfilled before we create the http client\n        try {\n            await fetch;\n            const http = this.http = this.getHttpClient();\n\n            http.configure(config => {\n                config\n                    .useStandardConfiguration()\n                    .withBaseUrl('http://localhost:3000/');\n            });\n\n            const response = await http.fetch('users');\n            this.users = await response.json();\n        } catch (err) {\n            console.log(\"***** Error : \" + err);\n        }\n    }\n}","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { inject, Lazy } from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-fetch-client';\n\n// polyfill fetch client conditionally\nconst fetch = !self.fetch ? System.import('isomorphic-fetch') : Promise.resolve(self.fetch);\n\n@inject(Lazy.of(HttpClient))\nexport class Users {\n    heading = 'Github Users';\n    users = [];\n\n    constructor(getHttpClient) {\n        this.getHttpClient = getHttpClient;\n    }\n\n    async activate() {\n        // ensure fetch is polyfilled before we create the http client\n        await fetch;\n        const http = this.http = this.getHttpClient();\n\n        http.configure(config => {\n            config\n                .useStandardConfiguration()\n                .withBaseUrl('https://api.github.com/');\n        });\n\n        const response = await http.fetch('users');\n        this.users = await response.json();\n    }\n}","//import {computedFrom} from 'aurelia-framework';\n\nexport class Welcome {\n  heading = 'Welcome to the Aurelia Navigation App!';\n  firstName = 'John';\n  lastName = 'Doe';\n  previousValue = this.fullName;\n\n  //Getters can't be directly observed, so they must be dirty checked.\n  //However, if you tell Aurelia the dependencies, it no longer needs to dirty check the property.\n  //To optimize by declaring the properties that this getter is computed from, uncomment the line below\n  //as well as the corresponding import above.\n  //@computedFrom('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  submit() {\n    this.previousValue = this.fullName;\n    alert(`Welcome, ${this.fullName}!`);\n  }\n\n  canDeactivate() {\n    if (this.fullName !== this.previousValue) {\n      return confirm('Are you sure you want to leave?');\n    }\n  }\n}\n\nexport class UpperValueConverter {\n  toView(value) {\n    return value && value.toUpperCase();\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n",null,null,null,null],"sourceRoot":"../src"}